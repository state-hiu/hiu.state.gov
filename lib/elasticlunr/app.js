require([  '../lib/elasticlunr/mustache.js',  '../lib/elasticlunr/elasticlunr.js',  'text!../elasticlunr/templates/question_view.mustache',  'text!../elasticlunr/templates/result_list.mustache',  'text!example_data.json',  'text!products_complete.json',  'text!example_index.json'], function (Mustache, elasticlunr, questionView, resultList, data, products, indexDump) {  function ObjectLength( object ) {    var length = 0;    for( var key in object ) {        if( object.hasOwnProperty(key) ) {            ++length;        }    }    return length;  };  var moreThanOneJpegTest = function( object ) {        var length = 0;        var jpegArrayKeys = [];        for( var key in object ) {            if( object.hasOwnProperty(key) ) {                //console.log('print key');                //console.log(key);                //console.log(key.indexOf("product_jpg"));                if( key.indexOf("product_jpg") > -1 ) {                    //console.log('product_jpg value: ');                    //console.log(object[key]);                    if (object[key]) {                      //console.log('pushing key ');                      ++length;                      jpegArrayKeys.push(key);                    }                }            }        }        //console.log('printing product jpg keys');        jpegArrayKeys.sort();        //console.log(jpegArrayKeys);                return {            length: length,            jpegArrayKeys: jpegArrayKeys        };        //need to order javascript array keys            };  var completeDropdown = function( object ) {      for( var key in object) {          //console.log('looping through questions');          //console.log(key);          //console.log(object[key]);          //console.log(object[key].id);          //console.log('more than 1 jpeg page test length');          //console.log( ObjectLength(layer.feature.properties) );          //console.log( moreThanOneJpegTest( layer.feature.properties ).length );          var JpegLength = moreThanOneJpegTest( object[key] ).length          var jpegArrayKeys = moreThanOneJpegTest( object[key] ).jpegArrayKeys          //console.log('Jpef Length');          //console.log('Jpef Length');          //console.log(JpegLength);         if ( JpegLength > 1) {              //for (key in layer.feature.properties) {                  //console.log('printing');                  //console.log(layer.feature.properties[key]);                  //console.log(key);             // }              console.log('inner loop!!');              console.log('printing JpegLength');              console.log(JpegLength);              //modify first JPG link text to say page 1 of x              $( "div[title='"+object[key].title+"'] .dropdown-menu li:last-child a" ).text("JPG - page 1 of "+JpegLength);              for (i = 1; i < JpegLength; i++) {                   console.log('printing i');                  console.log(i);                  console.log('printing jpegArrayKey');                  console.log(jpegArrayKeys[i]);                  var tempVal = jpegArrayKeys[i];                  console.log('obj key');                  console.log(object[key][tempVal]);                  $( "div[title='"+object[key].title+"'] .dropdown-menu" ).append('<li><a href="'+ object[key][tempVal] +'">JPG - page '+(i+1)+' of '+JpegLength+'</a></li>');                  //console.log(layer.feature.properties[moreThanOneJpegTest(layer.feature.properties.jpegArrayKeys[i])]);              }          }      }    }  var renderResultList = function (qs) {    $("#result-list-container")      .empty()      .append(Mustache.to_html(resultList, {results: qs}))      completeDropdown(qs);  }  window.profile = function (term) {    console.profile('search')    idx.search(term)    console.profileEnd('search')  }  window.search = function (term) {    console.time('search')    idx.search(term)    console.timeEnd('search')  }  //specify which field to index  window.idx = elasticlunr(function () {      this.addField('id');      this.addField('title');      this.addField('date_published');      this.addField('region_id');      this.addField('region_title');      this.addField('description');      this.addField('product_jpg');      this.addField('thumbnail_150');      this.addField('thumbnail_300');      this.addField('keywords');      this.addField('tweet');  });  //adds documents to index  for (var key in JSON.parse(products).features) {    idx.addDoc({      'id': JSON.parse(products).features[key].properties.product_id,      'title': JSON.parse(products).features[key].properties.title,      'description': JSON.parse(products).features[key].properties.description,      'keywords': JSON.parse(products).features[key].properties.keywords,      'region_id': JSON.parse(products).features[key].properties.region_id,      'region_title': JSON.parse(products).features[key].properties.region_title    })  }  //idx.addDoc(JSON.parse(products).features);  //parsing json, used to show back the results on the screen  //The map() method creates a new array with the results of calling a provided function on every element in this array.  var questions = JSON.parse(products).features.map(function (raw) {    return {      id: raw.properties.product_id,      title: raw.properties.title,      date_published: raw.properties.date_published,      region_id: raw.properties.region_id,      region_title: raw.properties.region_title,      description: raw.properties.description,      featured: raw.properties.featured,      product_jpg: raw.properties.product_jpg,      product_jpg_pg2: raw.properties.product_jpg_pg2,      product_jpg_pg3: raw.properties.product_jpg_pg3,      product_jpg_pg4: raw.properties.product_jpg_pg4,      thumbnail_150: raw.properties.thumbnail_150,      thumbnail_300: raw.properties.thumbnail_300,      keywords: raw.properties.keywords,      tweet: raw.properties.tweet    }  })  console.log('questions array: ');  console.log(questions);  console.log('total products');  console.log(ObjectLength(questions));  $('#product-count').prepend(ObjectLength(questions) + ' ');  renderResultList(questions);  //renderQuestionView(questions[0])  $('a.all').bind('click', function () {    renderResultList(questions)    $('input').val('')  })  var debounce = function (fn) {    var timeout    return function () {      var args = Array.prototype.slice.call(arguments),          ctx = this      clearTimeout(timeout)      timeout = setTimeout(function () {        fn.apply(ctx, args)      }, 100)    }  }  //debounce limits the rate at which a function can fire.  $('input').bind('keyup', debounce(function () {    console.log('keyup called');    console.log('this val');    console.log($(this).val());    if ($(this).val() < 2) {      //var config = $('#configuration').val();      //config.trim();      console.log('this val less than 2');      var json_config = null;    }    json_config = { fields: { title: {boost: 2}, description: {boost: 2}, keywords: {boost: 2}, region_id: {boost: 1}, region_title: {boost: 1}, id: {boost: 1} }, boolean: "AND" };    var query = $(this).val()    var results = null;    console.log('what is the query?');    console.log(query);    if (json_config == null) {        console.log("producting results");        results = idx.search(query);                results = idx.search(query).map(function (result) {            return questions.filter(function (q) {               //return q.id === parseInt(result.ref, 10)               return q.id === result.ref             })[0]        })    } else {        //results = idx.search(query, json_config).map(function (result) {          console.log("not producting results");          results = idx.search(query, json_config).map(function (result) {            return questions.filter(function (q) {               return q.id === result.ref             })[0]        })    }    console.log('what are the results?');    console.log(results);    console.log('count');    console.log(ObjectLength(results));    if ( ObjectLength(results) > 1 ) {      $('#product-count').html(ObjectLength(results) + ' results');    } else if ( ObjectLength(results) == 1 ) {      $('#product-count').html(ObjectLength(results) + ' result');    } else if ( ObjectLength(results) == 0 && $(this).val() == 0) {      $('#product-count').html(ObjectLength(questions) + ' total products');    } else {      $('#product-count').html('');    }        if ($(this).val() === '') {        console.log("no characters");        renderResultList(questions);    } else {      renderResultList(results);    }  }))  //delegate is a jquery function that attaches a handler to one or more events that match the selector  /*  $("#result-list-container").delegate('li', 'click', function () {    var li = $(this)    var id = li.data('result-id')  })  */})